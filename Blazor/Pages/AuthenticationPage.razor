@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject UserService UserService
@inject FirestoreService Db

<link href="https://fonts.googleapis.com/css2?family=Jost:wght@500&display=swap" rel="stylesheet">
<link href="css/Auth.css" rel="stylesheet">
@layout MinimalLayout

<div class="main">  
    <input type="checkbox" id="chk" aria-hidden="true">

    <div class="signup">
        <EditForm Model="@signupModel" OnValidSubmit="HandleSignup">
            <label for="chk" aria-hidden="true">Sign up</label>
            <InputText id="name" @bind-Value="signupModel.Name" placeholder="Name" class="input" required />
            <InputText id="username" @bind-Value="signupModel.Username" placeholder="Username" class="input" required />
            <InputText id="email" @bind-Value="signupModel.Email" placeholder="Email" class="input" required />
            <InputText type="password" id="password" @bind-Value="signupModel.Password" placeholder="Password" class="input" required />
            <button type="submit">Sign up</button>
            @if (!string.IsNullOrEmpty(signupModel.ErrorMessage))
            {
                <div class="alert alert-danger">@signupModel.ErrorMessage</div>
            }
        </EditForm>
    </div>

    <div class="login">
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <label for="chk" aria-hidden="true">Login</label>
            <InputText id="loginEmail" @bind-Value="loginModel.Email" placeholder="Email" class="input" required />
            <InputText type="password" id="loginPassword" @bind-Value="loginModel.Password" placeholder="Password" class="input" required />
            <button type="submit">Login</button>
            @if (!string.IsNullOrEmpty(loginModel.ErrorMessage))
            {
                <div class="alert alert-danger">@loginModel.ErrorMessage</div>
            }
        </EditForm>
    </div>
</div>

@code {
    // Models for handling login and signup form data.
    LoginModel loginModel = new LoginModel();
    SignupModel signupModel = new SignupModel();

    // Login form data structure.
    public class LoginModel
    {
        public string Email { get; set; } // Stores user's email.
        public string Password { get; set; } // Stores user's password.
        public string ErrorMessage { get; set; } // Stores error messages for login failures.
    }

    // Signup form data structure.
    public class SignupModel
    {
        public string Username { get; set; } // Stores user's username.
        public string Email { get; set; } // Stores user's email.
        public string Password { get; set; } // Stores user's password.
        public string ErrorMessage { get; set; } // Stores error messages for signup failures.
        public string Name { get; set; } // Stores user's full name.
    }

    // Response structure used to parse JSON responses from authentication functions.
    private class AuthResponse
    {
        public bool Success { get; set; } // Indicates success status of the authentication request.
        public string Error { get; set; } // Stores error message from the authentication process.
    }

    private async Task HandleSignup()
    {
        // Asynchronous function to handle user signup.
        try
        {
            // Invokes the JavaScript function that integrates with Firebase to register a new user.
            var result = await JS.InvokeAsync<object>("firebaseAuth.signUp", signupModel.Email, signupModel.Password, signupModel.Username);
            var jsonData = System.Text.Json.JsonSerializer.Serialize(result);
            var responseObject = System.Text.Json.JsonSerializer.Deserialize<AuthResponse>(jsonData);

            if (string.IsNullOrEmpty(responseObject?.Error))
            {
                // If signup is successful, fetch the current user ID from Firebase.
                string id = await JS.InvokeAsync<string>("getCurrentUserId");
                // Create a new User object and update database with the user's details.
                var u = new User(id, signupModel.Name, signupModel.Email, signupModel.Username);
                await Db.AddOrUpdate<User>(u);
                // Log the user in and redirect to the home page.
                UserService.Login(signupModel.Email, id);
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // If an error is returned from the authentication service, update the error message in the model.
                signupModel.ErrorMessage = responseObject.Error;
            }
        }
        catch (JSException ex)
        {
            // Handle JavaScript runtime errors separately.
            signupModel.ErrorMessage = "Error during signup. Please try again.";
        }
        catch (Exception ex)
        {
            // Catch-all for other exceptions that could occur during the signup process.
            signupModel.ErrorMessage =  "Error during signup. Please try again.";
        }
    }

    private async Task HandleLogin()
    {
        // Asynchronous function to handle user login.
        try
        {
            // Invokes the JavaScript function that integrates with Firebase to authenticate a user.
            var result = await JS.InvokeAsync<object>("firebaseAuth.logIn", loginModel.Email, loginModel.Password);
            var jsonData = System.Text.Json.JsonSerializer.Serialize(result);
            var responseObject = System.Text.Json.JsonSerializer.Deserialize<AuthResponse>(jsonData);

            if (string.IsNullOrEmpty(responseObject?.Error))
            {
                // If login is successful, fetch the current user ID from Firebase.
                string id = await JS.InvokeAsync<string>("getCurrentUserId");
                // Retrieve user details from the database.
                var user = await Db.Get<User>(id);
                // Log the user in and redirect to the home page.
                UserService.Login(user.Email, id);
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // If an error is returned from the authentication service, update the error message in the model.
                loginModel.ErrorMessage = responseObject?.Error ?? "Login failed. Please try again.";
            }
        }
        catch (JSException ex)
        {
            // Handle JavaScript runtime errors separately, indicating possible issues with credentials.
            loginModel.ErrorMessage = "Please try again with correct credentials.";
        }
        catch (Exception ex)
        {
            // Catch-all for other exceptions that could occur during the login process.
            loginModel.ErrorMessage = "Please try again with correct credentials.";
        }
    }
}
