@page "/swipe"
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<SwipePage> Logger
@inject NavigationManager Navigation


@if (businesses == null)
{
    <p>Loading...</p>
}
else if (!businesses.Any())
{
    <p>No businesses found.</p>
}
else
{
    <div class="swipeContent">
        <h3>Swipe Through Options</h3>

        <img class="yelpImg" src="@currentBusiness?.Image_Url" alt="Business Image" />
        <h4>@currentBusiness?.Name</h4>
        <p>@currentBusiness?.Location.FullAddress</p>
        <p>@currentBusiness?.Phone</p>
        <p>Rating: @currentBusiness?.Rating</p>
        <button class="yesBtn" @onclick="@(e => SwipeBusiness("yes"))">Yes</button>
        <button class="noBtn" @onclick="@(e => SwipeBusiness("no"))">No</button>
        <button class="maybeBtn" @onclick="@(e => SwipeBusiness("maybe"))">Maybe</button>
    </div>
}

@code {
    private List<Business>? businesses;
    private Business? currentBusiness;
    private int currentIndex = 0;
    private bool isLocationFetched = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isLocationFetched)
        {
            isLocationFetched = true; 
            await FetchBusinesses();
            SetCurrentBusiness();
            StateHasChanged();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await FetchBusinesses();
        SetCurrentBusiness();
    }

    private async Task FetchBusinesses()
    {
        Logger.LogInformation("Fetching businesses...");
        try
        {
            var location = await JS.InvokeAsync<double[]>("getCoords");
            var longitude = location[0];
            var latitude = location[1];

            Logger.LogInformation($"User's location: Latitude {latitude}, Longitude {longitude}");

            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", System.Environment.GetEnvironmentVariable("YELP_API_BEARER_TOKEN"));
            var response = await httpClient.GetAsync($"https://api.yelp.com/v3/businesses/search?latitude={latitude}&longitude={longitude}");
            var responseBody = await response.Content.ReadAsStringAsync(); 
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<YelpResponse>();
                businesses = result?.Businesses;
                foreach (var business in businesses)
                {
                    business.Location = new Location
                    {
                        Address1 = business.Location?.Address1,
                        City = business.Location?.City,
                        State = business.Location?.State,
                        Zip_Code = business.Location?.Zip_Code,
                        FullAddress = $"{business.Location?.Address1}, {business.Location?.City}, {business.Location?.State}, {business.Location?.Zip_Code}"
                    };
                }
                Logger.LogInformation($"Fetched {businesses?.Count ?? 0} businesses successfully.");
            }
            else
            {
                Logger.LogWarning($"Failed to fetch businesses. Status code: {responseBody}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while fetching businesses.");
        }

        if (businesses != null && businesses.Any())
        {
            SetCurrentBusiness();
        }
    }

    private void SetCurrentBusiness()
    {
        if (businesses != null && businesses.Any() && currentIndex < businesses.Count)
        {
            currentBusiness = businesses[currentIndex];
        }
    }

    private void SwipeBusiness(string swipeResponse)
    {
        Logger.LogInformation($"Swiped {swipeResponse} on {currentBusiness?.Name}");

        if (swipeResponse.ToLower() == "yes")
        {
            if (currentBusiness != null)
            {
                Navigation.NavigateTo($"/add-calendar?businessName={currentBusiness.Name}&phone={currentBusiness.Phone}&rating={currentBusiness.Rating}&imageUrl={currentBusiness.Image_Url}&address={currentBusiness.Location.FullAddress}");
            }
            else
            {
                Logger.LogWarning("Current business is null.");
            }
        }
        else
        {
            if (currentIndex < businesses?.Count - 1)
            {
                currentIndex++;
                SetCurrentBusiness();
            }
            else
            {
                Logger.LogInformation("Reached the end of the list, resetting.");
                currentIndex = 0;
                SetCurrentBusiness();
            }
        }
    }

    private class Business
    {
        public string Image_Url { get; set; }
        public string Name { get; set; }
        public string Phone { get; set; }
        public double Rating { get; set; }
        public Location Location { get; set; }
    }

    private class Location
    {
        public string Address1 { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string Zip_Code { get; set; }
        public string FullAddress { get; set; }
    }

    private class YelpResponse
    {
        public List<Business> Businesses { get; set; }
    }
}
