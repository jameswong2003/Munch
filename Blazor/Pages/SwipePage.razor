@page "/swipe"
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<SwipePage> Logger
@inject NavigationManager Navigation
@inject FirestoreService Db
@inject UserService UserService

<div class="background">
    <div class="container">
        <div class="swiper">
            @if (businesses == null || businesses.Count < 2)
            {
                <p>Loading or insufficient businesses...</p>
            }
            else
            {
               @foreach (var business in displayedBusinesses)
                {
                    <div class="card" @onclick="() => SwipeBusiness(business)">
                        <img class="yelpImg" src="@business.image_url" alt="Business Image" />
                        <h4>@business.name</h4>
                        <p>@business.Location.FullAddress</p>
                        <p>Phone: @business.phone</p>
                        <p>Rating: @business.rating <span>â˜…</span></p>
                        <p>Reviews: @business.review_count</p>
                        <p>Price: @business.price</p>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Business>? businesses;
    private Business[] displayedBusinesses = new Business[2];
    private HashSet<Business> displayedSet = new HashSet<Business>();
    private int selectionCount = 0;

    protected override async Task OnInitializedAsync() {
        @* Check if user is logged in *@
        if (!UserService.IsLoggedIn) {
            Navigation.NavigateTo("/");
        }

        await FetchBusinesses();
        SetInitialBusinesses();
    }

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            StateHasChanged();
        }
    }

    private async Task FetchBusinesses() {
        Logger.LogInformation("Fetching businesses...");
        try {
            var location = await JS.InvokeAsync<double[]>("getCoords");
            var longitude = location[0];
            var latitude = location[1];

            Logger.LogInformation($"User's location: Latitude {latitude}, Longitude {longitude}");

            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", System.Environment.GetEnvironmentVariable("YELP_API_BEARER_TOKEN"));
            var response = await httpClient.GetAsync($"https://api.yelp.com/v3/businesses/search?latitude={latitude}&longitude={longitude}&limit=50");
            if (response.IsSuccessStatusCode) {
                var result = await response.Content.ReadFromJsonAsync<YelpResponse>();
                businesses = result?.Businesses;
                Logger.LogInformation($"Fetched {businesses?.Count ?? 0} businesses successfully.");
            } else {
                Logger.LogWarning($"Failed to fetch businesses. Status code: {response.StatusCode}");
                businesses = new List<Business>(); // Avoid null reference errors
            }
        } catch (Exception ex) {
            Logger.LogError(ex, "An error occurred while fetching businesses.");
            businesses = new List<Business>(); // Ensure stability even on exceptions
        }
    }

    private void SetInitialBusinesses() {
        if (businesses != null && businesses.Count >= 2) {
            displayedBusinesses[0] = businesses[0];
            displayedBusinesses[1] = businesses[1];
            displayedSet.Add(businesses[0]);
            displayedSet.Add(businesses[1]);
        }
    }

    private void SwipeBusiness(Business selectedBusiness) {
        Logger.LogInformation($"Selected {selectedBusiness.name}");

        // Update the set of displayed businesses
        displayedSet.Add(selectedBusiness);

        // Find the index of the non-selected business and replace it
        int indexToReplace = Array.IndexOf(displayedBusinesses, selectedBusiness) == 0 ? 1 : 0;
        Business nextBusiness = FindNextBusiness(selectedBusiness);

        if (nextBusiness != null) {
            displayedBusinesses[indexToReplace] = nextBusiness;
        }

        selectionCount++;
        if (selectionCount == 5) { // After 5 selections, add to the database or handle end game
            Logger.LogInformation($"Final selection: {selectedBusiness.name}. Adding to database...");
            AddToDatabase(selectedBusiness);
        }
    }

    private Business FindNextBusiness(Business current) {
        foreach (var business in businesses) {
            if (!displayedSet.Contains(business)) {
                displayedSet.Add(business);
                return business;
            }
        }
        return null; // or handle logic if all are displayed
    }

    private async void AddToDatabase(Business business) {
        var user = await Db.Get<User>(UserService.Id);
        user.AddRestaurant(new Restaurant {
            image_url = business.image_url,
            name = business.name,
            phone = business.phone,
            rating = business.rating,
            review_count = business.review_count,
            yelp_url = business.yelp_url,
            price = business.price,
            full_address = business.Location.FullAddress
        });
        await Db.AddOrUpdate<User>(user);
        NavigateToAddCalendar(business);
    }

    private void NavigateToAddCalendar(Business business) {
        var url = $"/add-calendar?businessName={business.name}&phone={business.phone}&rating={business.rating}&imageUrl={business.image_url}&address={business.Location.FullAddress}";
        Navigation.NavigateTo(url);
    }

    private class Business {
        public string image_url { get; set; }
        public string name { get; set; }
        public string phone { get; set; }
        public double rating { get; set; }
        public int review_count { get; set; }
        public string yelp_url { get; set; }
        public string price { get; set; }
        public Location Location { get; set; }
    }

    private class Location {
        public string Address1 { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string Zip_Code { get; set; }
        public string FullAddress { get; set; }
    }

    private class YelpResponse {
        public List<Business> Businesses { get; set; }
    }
}
