@page "/trending"
@inject FirestoreService Db
@inject ILogger<SwipePage> Logger
@inject NavigationManager Navigation
@inject UserService UserService

<link href="css/trending.css" rel="stylesheet">

<h1 class="heading">Trending Restaurants</h1>

<div class="card-container">
    @foreach (var restaurant in pastRestaurants)
    {
        <div class="restaurant-card">
            <img src="@restaurant.ImageUrl" alt="@restaurant.Name" class="restaurant-image"/>
            <div class="restaurant-info">
                <h2>@restaurant.Name</h2>
                <p>@restaurant.Description</p>
            </div>
        </div>
    }
</div>

<h1 class="heading">Past Viewed Restaurants</h1>
<div class="card-container">
    @foreach (var restaurant in pastRestaurants)
    {
        <div class="restaurant-card">
            <img src="@restaurant.ImageUrl" alt="@restaurant.Name" class="restaurant-image"/>
            <div class="restaurant-info">
                <h2>@restaurant.Name</h2>
                <p>@restaurant.Description</p>
            </div>
        </div>
    }
</div>

@code {
    public class Restaurant
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string ImageUrl { get; set; }
    }
    private List<Restaurant> restaurants = new List<Restaurant>
    {
        new Restaurant { Name = "Chez Munch", Description = "A delightful mix of French and local cuisine.", ImageUrl = "images/chez-munch.jpg" },
        new Restaurant { Name = "Sushi House", Description = "Authentic and inventive sushi creations.", ImageUrl = "images/sushi-house.jpg" },
        new Restaurant { Name = "The Pie Pizzeria", Description = "Gourmet pizzas with a local twist.", ImageUrl = "images/pie-pizzeria.jpg" },
        new Restaurant { Name = "Burger Barn", Description = "Home of the best burgers in town.", ImageUrl = "images/burger-barn.jpg" }
    };

    private List<Restaurant> pastRestaurants = new List<Restaurant>
    {
        new Restaurant { Name = "Chez Munch", Description = "A delightful mix of French and local cuisine.", ImageUrl = "images/chez-munch.jpg" },
        new Restaurant { Name = "Sushi House", Description = "Authentic and inventive sushi creations.", ImageUrl = "images/sushi-house.jpg" },
        new Restaurant { Name = "The Pie Pizzeria", Description = "Gourmet pizzas with a local twist.", ImageUrl = "images/pie-pizzeria.jpg" },
        new Restaurant { Name = "Burger Barn", Description = "Home of the best burgers in town.", ImageUrl = "images/burger-barn.jpg" }
    };

    User CurrentUser = new User();
    List<Restaurant> PastRestaurants = new List<Restaurant>{};
    protected override async Task OnInitializedAsync()
    {
        @* Check if user is logged in *@
        if (!UserService.IsLoggedIn) {
            Navigation.NavigateTo("/");
        }
        
        string id = UserService.Id;
        CurrentUser = await Db.Get<User>(id);
        Logger.LogInformation($"Type of Liked Restaurants: {CurrentUser.LikedRestaurants.GetType()}, Count: {CurrentUser.LikedRestaurants.Count}");
    }


    @* TODO Get Past Restaurants from firebase DB *@
    private async void GetPastRestaurants()
    {
        string id = UserService.Id;
        User currentUser = await Db.Get<User>(id);
        Logger.LogInformation($"User: {currentUser}");
    }

    private class Business {
        public string image_url { get; set; }
        public string name { get; set; }
        public string phone { get; set; }
        public double rating { get; set; }
        public int review_count { get; set; }
        public string yelp_url { get; set; }
        public string price { get; set; }
        public Location Location { get; set; }
    }

    private List<Business>? trendingBusiness;

    @*
    Grab Trending restaurant
    Use yelp and grab top 5 most review_count and the highest rated
    *@
    private async Task FetchBusiness() {
        Logger.LogInformation("Fetching businesses...");

        try {
            var location = await JS.InvokeAsync<double[]>("getCoords");
            var longitude = location[0];
            var latitude = location[1];
            
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", System.Environment.GetEnvironmentVariable("YELP_API_BEARER_TOKEN"));
            var response = await httpClient.GetAsync($"https://api.yelp.com/v3/businesses/search?latitude={latitude}&longitude={longitude}&limit=20");

            if (response.IsSuccessStatusCode) {
                var result = await response.Content.ReadFromJsonAsync<YelpResponse>();
                businesses = result?.Businesses;
                
                // Filter the businesses
                if (businesses != null && businesses.Any()) {
                    // Sort businesses by review count in descending order
                    businesses = businesses.OrderByDescending(b => b.review_count).ToList();

                    // Take the top 5 businesses with the highest review count
                    businesses = businesses.Take(5).ToList();

                    // Sort businesses by rating in descending order
                    businesses = businesses.OrderByDescending(b => b.rating).ToList();

                    // Take the top 5 businesses with the highest rating
                    businesses = businesses.Take(5).ToList();

                    Logger.LogInformation($"Fetched {businesses.Count} trending businesses successfully.");
                } else {
                    Logger.LogInformation("No businesses found.");
                }

            }

        } catch (Exception ex) {
            Logger.LogError(ex, "An error occured while fetching business>");
            trendingBusiness = new List<Business>();
        }
    }
    
}
