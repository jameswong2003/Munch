@page "/trending"
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Geocoding
@using Geocoding.Microsoft
@inject FirestoreService Db
@inject ILogger<SwipePage> Logger
@inject NavigationManager Navigation
@inject UserService UserService
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory

<link href="css/trending.css" rel="stylesheet">

<h1 class="heading">Trending Restaurants</h1>

<div class="card-container">

    @if (showLocationModal){
        <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; flex-direction: row;">
            <div style="display: flex; flex-direction: column; align-items: flex-start">
                <div>Choose where you want restaurants from:</div>
            
                <button @onclick="UseCurrentLocation">Current Location</button>
            
            
                <label for="locationInput">Enter desired location</label>
                <input id="locationInput" type="text" @bind="inputLocation" placeholder="Input location..." />
                <button @onclick="UseInputLocation">Custom Location</button>
            </div>
            
        </div>
    }
    else if (businessMap == null || businessMap.Count != 5) {
        <p>Unable to load trending restaurants...</p>
    } else {

        for (var i = 0; i < businessMap.Count; i++) {
            var business = businessMap[i];
            var index = i + 1;

            <div class="restaurant-card" @onclick="() => NavigateToCalendar(business)">
                <img class="yelpImg img-radius" src="@business.image_url" alt="Business Image" style="max-height: 30vh" />
                <h4 class="user-name">@index. @business.name</h4>
                <p>@business.Location.FullAddress</p>
                <p><div>Categories: @string.Join(", ", business.categories.Select(c => c.title))</div></p>
                <p>Price: @(string.IsNullOrEmpty(business.price) ? "N/A" : business.price)</p>
                <p>Rating: @business.rating <span>★</span> • Reviews: @(business.review_count == 0 ? "N/A" : business.review_count.ToString())</p>
                <p>Phone: @(string.IsNullOrEmpty(business.phone) ? "N/A" : business.phone)</p>
            </div>
        }
    }
</div>

@code {
    public class Restaurant
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string ImageUrl { get; set; }
    }

    private double longitude;
    private double latitude;
    private bool showLocationModal = true;
    private string inputLocation = "";

    private void NavigateToCalendar(Business business)
    {
        var url = $"/add-calendar?businessName={business.name}&phone={business.phone}&rating={business.rating}&imageUrl={business.image_url}&address={business.Location.FullAddress}&categories={string.Join(", ", business.categories.Select(c => c.title))}&price={business.price}";
        Navigation.NavigateTo(url);
    }

    

    private async Task UseCurrentLocation() 
    {
        showLocationModal = false;

        double[] location = await JS.InvokeAsync<double[]>("getCoords");

        longitude = location[0];
        latitude = location[1];

        await FetchBusinesses();
        await SortBusiness();
    }
    
    private async Task UseInputLocation()
    {
        showLocationModal = false;

        string mapAPIKey = System.Environment.GetEnvironmentVariable("MICROSOFT_MAP_KEY");
        
        IGeocoder geocoder = new BingMapsGeocoder(mapAPIKey);
        IEnumerable<Address> address = await geocoder.GeocodeAsync(inputLocation);
        longitude = address.First().Coordinates.Longitude;
        latitude = address.First().Coordinates.Latitude;

        await FetchBusinesses();
        await SortBusiness();
    }
    private List<Restaurant> restaurants = new List<Restaurant>
    {
        new Restaurant { Name = "Chez Munch", Description = "A delightful mix of French and local cuisine.", ImageUrl = "images/chez-munch.jpg" },
        new Restaurant { Name = "Sushi House", Description = "Authentic and inventive sushi creations.", ImageUrl = "images/sushi-house.jpg" },
        new Restaurant { Name = "The Pie Pizzeria", Description = "Gourmet pizzas with a local twist.", ImageUrl = "images/pie-pizzeria.jpg" },
        new Restaurant { Name = "Burger Barn", Description = "Home of the best burgers in town.", ImageUrl = "images/burger-barn.jpg" }
    };

    private List<Restaurant> pastRestaurants = new List<Restaurant>
    {
        new Restaurant { Name = "Chez Munch", Description = "A delightful mix of French and local cuisine.", ImageUrl = "images/chez-munch.jpg" },
        new Restaurant { Name = "Sushi House", Description = "Authentic and inventive sushi creations.", ImageUrl = "images/sushi-house.jpg" },
        new Restaurant { Name = "The Pie Pizzeria", Description = "Gourmet pizzas with a local twist.", ImageUrl = "images/pie-pizzeria.jpg" },
        new Restaurant { Name = "Burger Barn", Description = "Home of the best burgers in town.", ImageUrl = "images/burger-barn.jpg" }
    };

    User CurrentUser = new User();
    List<Restaurant> PastRestaurants = new List<Restaurant>{};
    protected override async Task OnInitializedAsync()
    {
        @* Check if user is logged in *@
        if (!UserService.IsLoggedIn) {
            Navigation.NavigateTo("/");
        }
        
        string id = UserService.Id;
        CurrentUser = await Db.Get<User>(id);
        Logger.LogInformation($"Type of Liked Restaurants: {CurrentUser.LikedRestaurants.GetType()}, Count: {CurrentUser.LikedRestaurants.Count}");

        //await FetchBusinesses();
        await SortBusiness();
    }


    private List<Business>? businesses;
    @* Retrieve restaurants sort by most rated with highest rated *@
    private async Task FetchBusinesses()
    {
        Logger.LogInformation("Fetching businesses...");
        try {
            var location = await JS.InvokeAsync<double[]>("getCoords");
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", System.Environment.GetEnvironmentVariable("YELP_API_BEARER_TOKEN"));
            var response = await httpClient.GetAsync($"https://api.yelp.com/v3/businesses/search?latitude={latitude}&longitude={longitude}&limit=50");

            if (response.IsSuccessStatusCode) {
                var result = await response.Content.ReadFromJsonAsync<YelpResponse>();
                businesses = result?.Businesses.Select(b => {
                    b.categories = b.categories.GroupBy(c => c.title).Select(g => g.First()).ToList(); // Remove duplicate categories
                    return b;
                }).ToList();

                Logger.LogInformation($"Fetched {businesses.Count} businesses successfully.");
            } else {
                Logger.LogWarning($"Failed to fetch businesses. Status code: {response.StatusCode}");
                businesses = new List<Business>();
            }
        } catch (Exception ex) {
            Logger.LogError(ex, "An error occurred while fetching businesses.");
            businesses = new List<Business>();
        }
    }

    @* Sort the business by their rating value and display top 5 most rated *@
    private List<Business>? businessMap;
    private async Task SortBusiness() {
        Logger.LogInformation("Filtering & Sorting out Data");
        try {
            if (businesses == null) {
                Logger.LogWarning("Business list is null. Refetch business");
            }

            if (businesses != null && businesses.Count > 0) {
                var sortedByReviewCount = businesses.OrderByDescending(b => b.review_count).ToList();

                var topRatedBusiness = sortedByReviewCount.Take(5).ToList();
                businessMap = topRatedBusiness.OrderByDescending(b => b.rating).ToList();

                Logger.LogInformation("Successfully filtered and sorted out businesses");
            }
        } catch (Exception ex) {
            Logger.LogError(ex, "An error occured while filtering out data");
            businessMap = new List<Business>();
        }
    }



    private class Category
    {
        public string alias { get; set; }
        public string title { get; set; }
    }

    private class Business
    {
        public string image_url { get; set; }
        public string name { get; set; }
        public string phone { get; set; }
        public double rating { get; set; }
        public int review_count { get; set; }
        public string yelp_url { get; set; }
        public string price { get; set; }
        public List<Category> categories { get; set; }
        public Location Location { get; set; }
    }


    private class Location {
        public string Address1 { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string Zip_Code { get; set; }
        public string FullAddress => $"{Address1}, {City}, {State}, {Zip_Code}".TrimEnd(',', ' ');
    }

    private class YelpResponse {
        public List<Business> Businesses { get; set; }
    }
}
