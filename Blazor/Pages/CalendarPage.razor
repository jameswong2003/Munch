@page "/calendar"
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Calendar.v3
@using Google.Apis.Calendar.v3.Data
@using Google.Apis.Services
@using Google.Apis.Util.Store
@inject NavigationManager Navigation
<link href="css/calendar.css" rel="stylesheet">

<h3>User's Calendar</h3>

@if (!isAuthorized)
{
    <button class="authorize-button" @onclick="CheckAuthorization">Authorize</button>
}
else if (events == null)
{
    <p>Loading...</p>
}
else if (!events.Any())
{
    <p>No events found.</p>
}
else
{
    <ul class="events-list">
        @foreach (var evt in events)
        {
            <li>@evt.Summary - @evt.Start.DateTime?.ToString("MM/dd/yyyy HH:mm")</li>
        }
    </ul>
}

@code {
    private bool isAuthorized = false;
    private List<Event> events;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorization();
    }

    private async Task CheckAuthorization()
    {
        try
        {
            string clientId = System.Environment.GetEnvironmentVariable("GOOGLE_CLIENT_ID");
            Console.WriteLine("Client ID: " + clientId);

            string clientSecret = System.Environment.GetEnvironmentVariable("GOOGLE_CLIENT_SECRET");
            Console.WriteLine("Client Secret: " + clientSecret);


            UserCredential credential = await GoogleWebAuthorizationBroker.AuthorizeAsync(
                    new ClientSecrets
                    {
                        ClientId = clientId ,
                        ClientSecret = clientSecret,
                    },
                    new[] { CalendarService.Scope.Calendar },
                    "user", CancellationToken.None);

                var service = new CalendarService(new BaseClientService.Initializer()
                {
                    HttpClientInitializer = credential,
                    ApplicationName = "Munch",
                });


            EventsResource.ListRequest request = service.Events.List("primary");
            request.TimeMin = DateTime.Today.AddDays(-DateTime.Today.Day + 1);
            request.TimeMax = DateTime.Today.AddMonths(1).AddDays(-DateTime.Today.Day);
            request.ShowDeleted = false;
            request.SingleEvents = true;
            request.OrderBy = EventsResource.ListRequest.OrderByEnum.StartTime;

            var result = await request.ExecuteAsync();
            events = result.Items.ToList();
            isAuthorized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to retrieve calendar events: " + ex.Message);
            // Consider how to handle errors in the UI, e.g., display an error message
        }
    }

}
