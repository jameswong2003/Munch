@page "/calendar"
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Calendar.v3
@using Google.Apis.Calendar.v3.Data
@using Google.Apis.Services
@using Google.Apis.Util.Store
@inject NavigationManager Navigation
@inject UserService UserService

<link href="css/calendar.css" rel="stylesheet">

<h3>Your Calendar Calendar</h3>
<h4>@currentMonthYear</h4>  <!-- Display the current month and year -->

@if (!isAuthorized)
{
    <button class="authorize-button" @onclick="CheckAuthorization">Authorize</button>
}
else if (events == null)
{
    <p>Loading...</p>
}
else
{
    <div class="calendar-grid">
        @for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
           <div class="day @(date.Date == DateTime.Today ? "today" : "")" style="border: 1px solid #ccc; padding: 10px; margin: 5px;">
                <time>@date.ToString("dd MMM, ddd")</time> <!-- Showing date and day of the week -->
                @if (eventsByDate.TryGetValue(date.Date, out var dayEvents))
                {
                    foreach (var evt in dayEvents)
                    {
                        <p>@evt.Summary - @evt.Start.DateTime?.ToString("HH:mm")</p>
                    }
                }
            </div>

        }
    </div>
}

@code {
    private bool isAuthorized = false;
    private List<Event> events;
    private Dictionary<DateTime, List<Event>> eventsByDate = new();
    private DateTime startDate, endDate;
    private string currentMonthYear;

    protected override async Task OnInitializedAsync()
    {
        if (!UserService.IsLoggedIn) {
            Navigation.NavigateTo("/");
        }

        await CheckAuthorization();
    }

    private async Task CheckAuthorization()
    {
        try
        {
            string clientId = System.Environment.GetEnvironmentVariable("GOOGLE_CLIENT_ID");
            string clientSecret = System.Environment.GetEnvironmentVariable("GOOGLE_CLIENT_SECRET");

            UserCredential credential = await GoogleWebAuthorizationBroker.AuthorizeAsync(
                new ClientSecrets
                {
                    ClientId = clientId,
                    ClientSecret = clientSecret,
                },
                new[] { CalendarService.Scope.Calendar },
                "user", CancellationToken.None);

            var service = new CalendarService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = "Munch",
            });

            EventsResource.ListRequest request = service.Events.List("primary");
            DateTime firstDayOfMonth = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
            request.TimeMin = firstDayOfMonth;
            request.TimeMax = firstDayOfMonth.AddMonths(1).AddDays(-1);  // Direct use on a non-nullable DateTime
            request.ShowDeleted = false;
            request.SingleEvents = true;
            request.OrderBy = EventsResource.ListRequest.OrderByEnum.StartTime;

            var result = await request.ExecuteAsync();
            events = result.Items.ToList();
            isAuthorized = true;
            OrganizeEventsByDate();
            CalculateMonthBounds();
            currentMonthYear = firstDayOfMonth.ToString("MMMM yyyy");  // Set the current month and year
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to retrieve calendar events: " + ex.Message);
        }
    }

    private void OrganizeEventsByDate()
    {
        eventsByDate = events
            .Where(e => e.Start.DateTime.HasValue) // Ensure that DateTime is not null
            .GroupBy(e => e.Start.DateTime.Value.Date) // Safe to use Value here due to the previous check
            .ToDictionary(g => g.Key, g => g.ToList());
    }

    private void CalculateMonthBounds()
    {
        var currentMonthFirstDay = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
        startDate = currentMonthFirstDay.AddDays(-(int)currentMonthFirstDay.DayOfWeek);
        endDate = currentMonthFirstDay.AddMonths(1).AddDays(-1);
    }
}
