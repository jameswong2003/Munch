@page "/calendar"
@using Google.Apis.Auth.OAuth2;
@using Google.Apis.Calendar.v3;
@using Google.Apis.Calendar.v3.Data;
@using Google.Apis.Services;
@using Google.Apis.Util.Store;
@inject NavigationManager Navigation

<h3>User's Calendar</h3>

@if (!isAuthorized)
{
    <button @onclick="@( e => RequestAuthorization())">Authorize</button>
}
else if (events == null)
{
    <p>Loading...</p>
}
else if (!events.Any())
{
    <p>No events found.</p>
}
else
{
    <ul>
        @foreach (var evt in events)
        {
            <li>@evt.Summary - @evt.Start.DateTime</li>
        }
    </ul>
}

@code {
    private bool isAuthorized = false;
    private List<Event> events;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorization();
    }

    private async Task CheckAuthorization()
    {
        try
        {
            string[] scopes = { CalendarService.Scope.Calendar };
            UserCredential credential = await GoogleWebAuthorizationBroker.AuthorizeAsync(
                GoogleClientSecrets.Load(new System.IO.FileStream("credentials.json", System.IO.FileMode.Open, System.IO.FileAccess.Read)).Secrets,
                scopes,
                "user",
                CancellationToken.None,
                new FileDataStore("token.json", true));

            var service = new CalendarService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = "Your Application Name"
            });

            EventsResource.ListRequest request = service.Events.List("primary");
            request.TimeMin = DateTime.Today.AddDays(-DateTime.Today.Day + 1); // First day of the current month
            request.TimeMax = DateTime.Today.AddMonths(1).AddDays(-DateTime.Today.Day); // Last day of the current month
            request.ShowDeleted = false;
            request.SingleEvents = true;
            request.OrderBy = EventsResource.ListRequest.OrderByEnum.StartTime;

            var result = await request.ExecuteAsync();
            events = result.Items.ToList();
            isAuthorized = true;
            StateHasChanged(); // Update UI after authorization
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    private async Task RequestAuthorization()
    {
        await CheckAuthorization();
    }
}
